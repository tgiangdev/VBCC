/**
 * Angular.Schule Book API
 * Simple HTTP backend for serving books
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Book } from '../model/book';
import { Rating } from '../model/rating';
import { RestError } from '../model/restError';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BooksService {

    protected basePath = 'https://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * RESET store to initial state
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public booksDelete(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public booksDelete(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public booksDelete(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public booksDelete(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/books`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all books
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public booksGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Book>>;
    public booksGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Book>>>;
    public booksGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Book>>>;
    public booksGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Book>>(`${this.basePath}/books`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return whether ISBN exists or not
     * 
     * @param isbn ISBN of the book
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public booksIsbnCheckGet(isbn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public booksIsbnCheckGet(isbn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public booksIsbnCheckGet(isbn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public booksIsbnCheckGet(isbn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (isbn === null || isbn === undefined) {
            throw new Error('Required parameter isbn was null or undefined when calling booksIsbnCheckGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/books/${encodeURIComponent(String(isbn))}/check`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a book
     * 
     * @param isbn ISBN of the book to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public booksIsbnDelete(isbn: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public booksIsbnDelete(isbn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public booksIsbnDelete(isbn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public booksIsbnDelete(isbn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (isbn === null || isbn === undefined) {
            throw new Error('Required parameter isbn was null or undefined when calling booksIsbnDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<any>(`${this.basePath}/books/${encodeURIComponent(String(isbn))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a single book by ISBN
     * 
     * @param isbn ISBN of the book
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public booksIsbnGet(isbn: string, observe?: 'body', reportProgress?: boolean): Observable<Book>;
    public booksIsbnGet(isbn: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Book>>;
    public booksIsbnGet(isbn: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Book>>;
    public booksIsbnGet(isbn: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (isbn === null || isbn === undefined) {
            throw new Error('Required parameter isbn was null or undefined when calling booksIsbnGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Book>(`${this.basePath}/books/${encodeURIComponent(String(isbn))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an existing book
     * Requires a full book entry, ISBN in query and body must match
     * @param isbn ISBN of the book to update
     * @param book An existing book to update
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public booksIsbnPut(isbn: string, book: Book, observe?: 'body', reportProgress?: boolean): Observable<Book>;
    public booksIsbnPut(isbn: string, book: Book, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Book>>;
    public booksIsbnPut(isbn: string, book: Book, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Book>>;
    public booksIsbnPut(isbn: string, book: Book, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (isbn === null || isbn === undefined) {
            throw new Error('Required parameter isbn was null or undefined when calling booksIsbnPut.');
        }

        if (book === null || book === undefined) {
            throw new Error('Required parameter book was null or undefined when calling booksIsbnPut.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Book>(`${this.basePath}/books/${encodeURIComponent(String(isbn))}`,
            book,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update rating of a book to a given value
     * 
     * @param isbn ISBN of the book
     * @param rating The new rating value for the given book
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public booksIsbnRatePost(isbn: string, rating: Rating, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public booksIsbnRatePost(isbn: string, rating: Rating, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public booksIsbnRatePost(isbn: string, rating: Rating, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public booksIsbnRatePost(isbn: string, rating: Rating, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (isbn === null || isbn === undefined) {
            throw new Error('Required parameter isbn was null or undefined when calling booksIsbnRatePost.');
        }

        if (rating === null || rating === undefined) {
            throw new Error('Required parameter rating was null or undefined when calling booksIsbnRatePost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/books/${encodeURIComponent(String(isbn))}/rate`,
            rating,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new book
     * 
     * @param book A new book to be stored
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public booksPost(book: Book, observe?: 'body', reportProgress?: boolean): Observable<Book>;
    public booksPost(book: Book, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Book>>;
    public booksPost(book: Book, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Book>>;
    public booksPost(book: Book, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (book === null || book === undefined) {
            throw new Error('Required parameter book was null or undefined when calling booksPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Book>(`${this.basePath}/books`,
            book,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all books matching the given search term (case insensitive). The properties isbn, title, authors, published (interpreted as ISO string), subtitle and description are evaluated for a match.
     * 
     * @param searchTerm search term (treated case insensitive)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public booksSearchSearchTermGet(searchTerm: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Book>>;
    public booksSearchSearchTermGet(searchTerm: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Book>>>;
    public booksSearchSearchTermGet(searchTerm: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Book>>>;
    public booksSearchSearchTermGet(searchTerm: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (searchTerm === null || searchTerm === undefined) {
            throw new Error('Required parameter searchTerm was null or undefined when calling booksSearchSearchTermGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Book>>(`${this.basePath}/books/search/${encodeURIComponent(String(searchTerm))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all books - SECURED via OAuth 2.0
     * Please authorize first! User: auth@angular.schule Pass: auth0123
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public secureBooksGet(observe?: 'body', reportProgress?: boolean): Observable<Array<Book>>;
    public secureBooksGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Book>>>;
    public secureBooksGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Book>>>;
    public secureBooksGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Auth0) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Book>>(`${this.basePath}/secure/books`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
