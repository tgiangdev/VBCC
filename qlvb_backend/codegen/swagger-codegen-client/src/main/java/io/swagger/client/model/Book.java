/*
 * Angular.Schule Book API
 * Simple HTTP backend for serving books
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.Thumbnail;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * The main entity of this API
 */
@ApiModel(description = "The main entity of this API")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-10-19T14:43:14.233+07:00")
public class Book {
  @SerializedName("isbn")
  private String isbn = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("authors")
  private List<String> authors = null;

  @SerializedName("subtitle")
  private String subtitle = null;

  @SerializedName("rating")
  private Integer rating = null;

  @SerializedName("published")
  private OffsetDateTime published = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("thumbnails")
  private List<Thumbnail> thumbnails = null;

  @SerializedName("price")
  private BigDecimal price = null;

  @SerializedName("firstThumbnailUrl")
  private String firstThumbnailUrl = null;

  public Book isbn(String isbn) {
    this.isbn = isbn;
    return this;
  }

   /**
   * ISBN, which is used as identifier - only numbers are allowed (no hyphens)
   * @return isbn
  **/
  @ApiModelProperty(example = "9783864907791", required = true, value = "ISBN, which is used as identifier - only numbers are allowed (no hyphens)")
  public String getIsbn() {
    return isbn;
  }

  public void setIsbn(String isbn) {
    this.isbn = isbn;
  }

  public Book title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Title of the book
   * @return title
  **/
  @ApiModelProperty(example = "Angular", required = true, value = "Title of the book")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Book authors(List<String> authors) {
    this.authors = authors;
    return this;
  }

  public Book addAuthorsItem(String authorsItem) {
    if (this.authors == null) {
      this.authors = new ArrayList<String>();
    }
    this.authors.add(authorsItem);
    return this;
  }

   /**
   * List of all authors of the book
   * @return authors
  **/
  @ApiModelProperty(example = "[\"Ferdinand Malcher\",\"Johannes Hoppe\",\"Danny Koppenhagen\"]", value = "List of all authors of the book")
  public List<String> getAuthors() {
    return authors;
  }

  public void setAuthors(List<String> authors) {
    this.authors = authors;
  }

  public Book subtitle(String subtitle) {
    this.subtitle = subtitle;
    return this;
  }

   /**
   * Subtitle of the book
   * @return subtitle
  **/
  @ApiModelProperty(example = "Grundlagen, fortgeschrittene Themen und Best Practices", value = "Subtitle of the book")
  public String getSubtitle() {
    return subtitle;
  }

  public void setSubtitle(String subtitle) {
    this.subtitle = subtitle;
  }

  public Book rating(Integer rating) {
    this.rating = rating;
    return this;
  }

   /**
   * Rating of the book as stars, from one star (bad) to five stars (great)
   * minimum: 1
   * maximum: 5
   * @return rating
  **/
  @ApiModelProperty(example = "4", value = "Rating of the book as stars, from one star (bad) to five stars (great)")
  public Integer getRating() {
    return rating;
  }

  public void setRating(Integer rating) {
    this.rating = rating;
  }

  public Book published(OffsetDateTime published) {
    this.published = published;
    return this;
  }

   /**
   * date-time as defined by RFC3339 (http://www.ietf.org/rfc/rfc3339.txt) - like new Date().toISOString();
   * @return published
  **/
  @ApiModelProperty(example = "2020-10-12T00:00:00.000Z", value = "date-time as defined by RFC3339 (http://www.ietf.org/rfc/rfc3339.txt) - like new Date().toISOString();")
  public OffsetDateTime getPublished() {
    return published;
  }

  public void setPublished(OffsetDateTime published) {
    this.published = published;
  }

  public Book description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Short description of the book
   * @return description
  **/
  @ApiModelProperty(example = "Lernen Sie Angular mit diesem Praxisbuch! Mit einem anspruchsvollen Beispielprojekt f√ºhren wir Sie durch die Welt von Angular.", value = "Short description of the book")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Book thumbnails(List<Thumbnail> thumbnails) {
    this.thumbnails = thumbnails;
    return this;
  }

  public Book addThumbnailsItem(Thumbnail thumbnailsItem) {
    if (this.thumbnails == null) {
      this.thumbnails = new ArrayList<Thumbnail>();
    }
    this.thumbnails.add(thumbnailsItem);
    return this;
  }

   /**
   * Images of the book, which are used as thumbnails
   * @return thumbnails
  **/
  @ApiModelProperty(value = "Images of the book, which are used as thumbnails")
  public List<Thumbnail> getThumbnails() {
    return thumbnails;
  }

  public void setThumbnails(List<Thumbnail> thumbnails) {
    this.thumbnails = thumbnails;
  }

  public Book price(BigDecimal price) {
    this.price = price;
    return this;
  }

   /**
   * Price of the book
   * minimum: 0
   * @return price
  **/
  @ApiModelProperty(example = "36.9", value = "Price of the book")
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }

   /**
   * URL of the first thumbnail, just a shorthand
   * @return firstThumbnailUrl
  **/
  @ApiModelProperty(example = "https://api.angular.schule/images/cover/angular_auflage3.jpg", value = "URL of the first thumbnail, just a shorthand")
  public String getFirstThumbnailUrl() {
    return firstThumbnailUrl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Book book = (Book) o;
    return Objects.equals(this.isbn, book.isbn) &&
        Objects.equals(this.title, book.title) &&
        Objects.equals(this.authors, book.authors) &&
        Objects.equals(this.subtitle, book.subtitle) &&
        Objects.equals(this.rating, book.rating) &&
        Objects.equals(this.published, book.published) &&
        Objects.equals(this.description, book.description) &&
        Objects.equals(this.thumbnails, book.thumbnails) &&
        Objects.equals(this.price, book.price) &&
        Objects.equals(this.firstThumbnailUrl, book.firstThumbnailUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isbn, title, authors, subtitle, rating, published, description, thumbnails, price, firstThumbnailUrl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Book {\n");
    
    sb.append("    isbn: ").append(toIndentedString(isbn)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    authors: ").append(toIndentedString(authors)).append("\n");
    sb.append("    subtitle: ").append(toIndentedString(subtitle)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    firstThumbnailUrl: ").append(toIndentedString(firstThumbnailUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

