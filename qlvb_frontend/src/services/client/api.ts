/* tslint:disable */
/* eslint-disable */
/**
 * Contact Application API
 * This is a sample Spring Boot RESTful service using springdoc-openapi and OpenAPI 3.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    lastName?: string;
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    points?: number;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    role?: AccountRoleEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Account
     */
    active?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum AccountRoleEnum {
    User = 'USER',
    Mod = 'MOD',
    Admin = 'ADMIN'
}

/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {any}
     * @memberof InlineObject
     */
    file?: any;
}
/**
 * 
 * @export
 * @interface JwtAuthenticationResponse
 */
export interface JwtAuthenticationResponse {
    /**
     * 
     * @type {string}
     * @memberof JwtAuthenticationResponse
     */
    accessToken?: string;
    /**
     * 
     * @type {string}
     * @memberof JwtAuthenticationResponse
     */
    tokenType?: string;
    /**
     * 
     * @type {Account}
     * @memberof JwtAuthenticationResponse
     */
    account?: Account;
}
/**
 * 
 * @export
 * @interface LoginPayload
 */
export interface LoginPayload {
    /**
     * 
     * @type {string}
     * @memberof LoginPayload
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginPayload
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface ResponseError
 */
export interface ResponseError {
    /**
     * 
     * @type {number}
     * @memberof ResponseError
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseError
     */
    timestamp?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseError
     */
    error?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseError
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseError
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseError
     */
    path?: string;
}
/**
 * 
 * @export
 * @interface Student
 */
export interface Student {
    /**
     * 
     * @type {number}
     * @memberof Student
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Student
     */
    gender?: number;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    dateOfBirth?: string;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    ranking?: StudentRankingEnum;
    /**
     * 
     * @type {number}
     * @memberof Student
     */
    clazzId?: number;
    /**
     * 
     * @type {string}
     * @memberof Student
     */
    description?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum StudentRankingEnum {
    Good = 'GOOD',
    Medium = 'MEDIUM'
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginPayload} [loginPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginPayload?: LoginPayload, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginPayload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginPayload} [loginPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginPayload?: LoginPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JwtAuthenticationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginPayload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginPayload} [loginPayload] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginPayload?: LoginPayload, options?: any): AxiosPromise<JwtAuthenticationResponse> {
            return localVarFp.login(loginPayload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {LoginPayload} [loginPayload] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(loginPayload?: LoginPayload, options?: any) {
        return AuthApiFp(this.configuration).login(loginPayload, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudentApi - axios parameter creator
 * @export
 */
export const StudentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/student`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import excel student
         * @param {string} info 
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importExcel: async (info: string, inlineObject?: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'info' is not null or undefined
            assertParamExists('importExcel', 'info', info)
            const localVarPath = `/api/student/import`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (info !== undefined) {
                localVarQueryParameter['info'] = info;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} sleep 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sleep: async (sleep: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sleep' is not null or undefined
            assertParamExists('sleep', 'sleep', sleep)
            const localVarPath = `/api/student/sleep`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sleep !== undefined) {
                localVarQueryParameter['sleep'] = sleep;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentApi - functional programming interface
 * @export
 */
export const StudentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Student>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Import excel student
         * @param {string} info 
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importExcel(info: string, inlineObject?: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importExcel(info, inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} sleep 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sleep(sleep: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sleep(sleep, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudentApi - factory interface
 * @export
 */
export const StudentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudentApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all student
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAll(options?: any): AxiosPromise<Array<Student>> {
            return localVarFp.findAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import excel student
         * @param {string} info 
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importExcel(info: string, inlineObject?: InlineObject, options?: any): AxiosPromise<string> {
            return localVarFp.importExcel(info, inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} sleep 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sleep(sleep: number, options?: any): AxiosPromise<string> {
            return localVarFp.sleep(sleep, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudentApi - object-oriented interface
 * @export
 * @class StudentApi
 * @extends {BaseAPI}
 */
export class StudentApi extends BaseAPI {
    /**
     * 
     * @summary Get all student
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public findAll(options?: any) {
        return StudentApiFp(this.configuration).findAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Import excel student
     * @param {string} info 
     * @param {InlineObject} [inlineObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public importExcel(info: string, inlineObject?: InlineObject, options?: any) {
        return StudentApiFp(this.configuration).importExcel(info, inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} sleep 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public sleep(sleep: number, options?: any) {
        return StudentApiFp(this.configuration).sleep(sleep, options).then((request) => request(this.axios, this.basePath));
    }
}


