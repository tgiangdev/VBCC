/*
 * Angular.Schule Book API
 * Simple HTTP backend for serving books
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Book;
import io.swagger.client.model.Rating;
import io.swagger.client.model.RestError;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BooksApi
 */
@Ignore
public class BooksApiTest {

    private final BooksApi api = new BooksApi();

    
    /**
     * RESET store to initial state
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void booksDeleteTest() throws ApiException {
        api.booksDelete();

        // TODO: test validations
    }
    
    /**
     * Get all books
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void booksGetTest() throws ApiException {
        List<Book> response = api.booksGet();

        // TODO: test validations
    }
    
    /**
     * Return whether ISBN exists or not
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void booksIsbnCheckGetTest() throws ApiException {
        String isbn = null;
        api.booksIsbnCheckGet(isbn);

        // TODO: test validations
    }
    
    /**
     * Delete a book
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void booksIsbnDeleteTest() throws ApiException {
        String isbn = null;
        api.booksIsbnDelete(isbn);

        // TODO: test validations
    }
    
    /**
     * Get a single book by ISBN
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void booksIsbnGetTest() throws ApiException {
        String isbn = null;
        Book response = api.booksIsbnGet(isbn);

        // TODO: test validations
    }
    
    /**
     * Update an existing book
     *
     * Requires a full book entry, ISBN in query and body must match
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void booksIsbnPutTest() throws ApiException {
        String isbn = null;
        Book book = null;
        Book response = api.booksIsbnPut(isbn, book);

        // TODO: test validations
    }
    
    /**
     * Update rating of a book to a given value
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void booksIsbnRatePostTest() throws ApiException {
        String isbn = null;
        Rating rating = null;
        api.booksIsbnRatePost(isbn, rating);

        // TODO: test validations
    }
    
    /**
     * Create a new book
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void booksPostTest() throws ApiException {
        Book book = null;
        Book response = api.booksPost(book);

        // TODO: test validations
    }
    
    /**
     * Get all books matching the given search term (case insensitive). The properties isbn, title, authors, published (interpreted as ISO string), subtitle and description are evaluated for a match.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void booksSearchSearchTermGetTest() throws ApiException {
        String searchTerm = null;
        List<Book> response = api.booksSearchSearchTermGet(searchTerm);

        // TODO: test validations
    }
    
    /**
     * Get all books - SECURED via OAuth 2.0
     *
     * Please authorize first! User: auth@angular.schule Pass: auth0123
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void secureBooksGetTest() throws ApiException {
        List<Book> response = api.secureBooksGet();

        // TODO: test validations
    }
    
}
